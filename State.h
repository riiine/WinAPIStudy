/** 중복된 헤더를 방지합니다. */
#pragma once

/** namespace로 구분해 주면 같은 프로젝트에 같은 이름의 클래스가 존재할 수 있습니다. */
namespace FlappyBirdGame
{
    /**
    State라는 이름의 추상클래스를 정의해 주도록 합니다.
    클래스에 하나라도 순수가상함수가 있으면 추상클래스가 됩니다.
    추상 클래스는 단독으로 객체 생성이 되지 않습니다.
    */
    class State
    {
    public:
        /**
        추상 클래스 자체로는 객체 생성을 할 수 없습니다.
        순수 가상함수가 하나라도 있는 클래스는 추상 클래스가 됩니다.
        추상 클래스를 부모 클래스로 상속받는 자식 클래스는 부모 클래스에 있는
        모든 순수 가상함수들을 구현해 주어야만 객체 생성이 됩니다.

        자식 클래스에서 꼭 구현해 주어야 하는 함수들이 있다면 추상 클래스를 부모 클래스로
        상속받게 됩니다. 인터페이스 개념입니다. 표준을 만들어 줍니다.

        unique_ptr : 객체의 유일한 소유권을 가지는 스마트 포인터
        shared_ptr : 객체간의 공유가 가능한 스마트 포인터
        weak_ptr : shared_ptr의 순환 참조 문제를 해결한 약한 참조의 스마트 포인터
        */

        /** 초기화 함수입니다. 순수 가상함수입니다. */
        virtual void Init() = 0;
        /** 입력을 처리하기 위한 함수입니다. 순수 가상함수입니다. */
        virtual void HandleInput() = 0;
        /** 업데이트 함수입니다. 순수 가상함수입니다. */
        virtual void Update(float dt) = 0;
        /** 화면을 그려주기 위한 함수입니다. 순수 가상함수입니다. */
        virtual void Draw(float dt) = 0;

        /** 게임 잠시 멈춤 함수입니다. 가상함수입니다. 함수 오버라이딩에 쓰입니다. */
        virtual void Pause() {}
        /** 다시 시작함수입니다. 가상함수입니다. 함수 오버라이딩에 쓰입니다. */
        virtual void Resume() {}
    };
}